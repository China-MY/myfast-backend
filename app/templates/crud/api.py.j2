from typing import Any, List, Optional
from fastapi import APIRouter, Depends, HTTPException, Query, Path, Body
from sqlalchemy.orm import Session
from datetime import datetime

from app.api import deps
from app.crud.{{ table.module_name }}.{{ table.business_name }} import {{ table.business_name }}
from app.schemas.{{ table.module_name }}.{{ table.business_name }} import (
    {{ table.class_name }}Create, 
    {{ table.class_name }}Update, 
    {{ table.class_name }}InDB,
    {{ table.class_name }}QueryParams
)

router = APIRouter()


@router.get("/", response_model=List[{{ table.class_name }}InDB])
def read_{{ table.business_name }}s(
    db: Session = Depends(deps.get_db),
    skip: int = 0,
    limit: int = 100,
) -> Any:
    """
    获取{{ table.table_comment or table.class_name }}列表
    """
    {{ table.business_name }}s = {{ table.business_name }}.get_multi(db, skip=skip, limit=limit)
    return {{ table.business_name }}s


@router.get("/total", response_model=int)
def get_total(
    db: Session = Depends(deps.get_db),
    {% for column in columns %}
    {% if column.query_type == 'EQ' %}
    {{ column.field_name }}: Optional[{{ column.python_type | default('str') }}] = None,
    {% elif column.query_type == 'NE' %}
    {{ column.field_name }}: Optional[{{ column.python_type | default('str') }}] = None,
    {% elif column.query_type == 'GT' %}
    {{ column.field_name }}: Optional[{{ column.python_type | default('str') }}] = None,
    {% elif column.query_type == 'GTE' %}
    {{ column.field_name }}: Optional[{{ column.python_type | default('str') }}] = None,
    {% elif column.query_type == 'LT' %}
    {{ column.field_name }}: Optional[{{ column.python_type | default('str') }}] = None,
    {% elif column.query_type == 'LTE' %}
    {{ column.field_name }}: Optional[{{ column.python_type | default('str') }}] = None,
    {% elif column.query_type == 'LIKE' %}
    {{ column.field_name }}: Optional[{{ column.python_type | default('str') }}] = None,
    {% elif column.query_type == 'BETWEEN' %}
    {{ column.field_name }}_begin: Optional[{{ column.python_type | default('str') }}] = None,
    {{ column.field_name }}_end: Optional[{{ column.python_type | default('str') }}] = None,
    {% endif %}
    {% endfor %}
) -> Any:
    """
    获取{{ table.table_comment or table.class_name }}总数
    """
    query = {{ table.class_name }}QueryParams(
        {% for column in columns %}
        {% if column.query_type == 'EQ' %}
        {{ column.field_name }}={{ column.field_name }},
        {% elif column.query_type == 'NE' %}
        {{ column.field_name }}={{ column.field_name }},
        {% elif column.query_type == 'GT' %}
        {{ column.field_name }}={{ column.field_name }},
        {% elif column.query_type == 'GTE' %}
        {{ column.field_name }}={{ column.field_name }},
        {% elif column.query_type == 'LT' %}
        {{ column.field_name }}={{ column.field_name }},
        {% elif column.query_type == 'LTE' %}
        {{ column.field_name }}={{ column.field_name }},
        {% elif column.query_type == 'LIKE' %}
        {{ column.field_name }}={{ column.field_name }},
        {% elif column.query_type == 'BETWEEN' %}
        {{ column.field_name }}_begin={{ column.field_name }}_begin,
        {{ column.field_name }}_end={{ column.field_name }}_end,
        {% endif %}
        {% endfor %}
    )
    return {{ table.business_name }}.get_count(db, query=query)


@router.get("/{id}", response_model={{ table.class_name }}InDB)
def read_{{ table.business_name }}(
    *,
    db: Session = Depends(deps.get_db),
    id: int,
) -> Any:
    """
    获取指定{{ table.table_comment or table.class_name }}
    """
    {{ table.business_name }}_obj = {{ table.business_name }}.get(db, id=id)
    if not {{ table.business_name }}_obj:
        raise HTTPException(status_code=404, detail="Item not found")
    return {{ table.business_name }}_obj


@router.post("/", response_model={{ table.class_name }}InDB)
def create_{{ table.business_name }}(
    *,
    db: Session = Depends(deps.get_db),
    {{ table.business_name }}_in: {{ table.class_name }}Create,
) -> Any:
    """
    创建{{ table.table_comment or table.class_name }}
    """
    {{ table.business_name }}_obj = {{ table.business_name }}.create(db, obj_in={{ table.business_name }}_in)
    return {{ table.business_name }}_obj


@router.put("/{id}", response_model={{ table.class_name }}InDB)
def update_{{ table.business_name }}(
    *,
    db: Session = Depends(deps.get_db),
    id: int,
    {{ table.business_name }}_in: {{ table.class_name }}Update,
) -> Any:
    """
    更新{{ table.table_comment or table.class_name }}
    """
    {{ table.business_name }}_obj = {{ table.business_name }}.get(db, id=id)
    if not {{ table.business_name }}_obj:
        raise HTTPException(status_code=404, detail="Item not found")
    {{ table.business_name }}_obj = {{ table.business_name }}.update(db, db_obj={{ table.business_name }}_obj, obj_in={{ table.business_name }}_in)
    return {{ table.business_name }}_obj


@router.delete("/{id}", response_model={{ table.class_name }}InDB)
def delete_{{ table.business_name }}(
    *,
    db: Session = Depends(deps.get_db),
    id: int,
) -> Any:
    """
    删除{{ table.table_comment or table.class_name }}
    """
    {{ table.business_name }}_obj = {{ table.business_name }}.get(db, id=id)
    if not {{ table.business_name }}_obj:
        raise HTTPException(status_code=404, detail="Item not found")
    {{ table.business_name }}_obj = {{ table.business_name }}.remove(db, id=id)
    return {{ table.business_name }}_obj


@router.delete("/batch", response_model=List[{{ table.class_name }}InDB])
def batch_delete(
    *,
    db: Session = Depends(deps.get_db),
    ids: List[int] = Body(..., embed=True),
) -> Any:
    """
    批量删除{{ table.table_comment or table.class_name }}
    """
    result = []
    for id in ids:
        item = {{ table.business_name }}.get(db, id)
        if item:
            result.append({{ table.business_name }}.remove(db, id=id))
    return result 